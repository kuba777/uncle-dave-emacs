* Basic customization
#+BEGIN_SRC emacs-lisp
  ;; BASIC CUSTOMIZATION
  ;; --------------------------------------

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq-default indent-tabs-mode nil)
  (scroll-bar-mode -1)

  ;; popup-kill-ring
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))

  ;; clock
  (setq display-time-24hr-format t)
  (display-time-mode 1)

  (global-set-key [f9] 'toggle-menu-bar-mode-from-frame)

  (set-face-attribute 'default nil :height 140)
  (define-key special-event-map [config-changed-event] #'ignore)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (setq inhibit-startup-message t) ;; hide the startup message
  ;; (load-theme 'material t) ;; load material theme

  ;; constant line numbers size; comment these lines for tetris
  (eval-after-load "linum"
    '(set-face-attribute 'linum nil :height 140)) 

  ;; enable line numbers globally
  (global-linum-mode t)

  ;; columns number
  (column-number-mode)

  ;; parenthesis

  ;; to enable in all buffers, try to disable in html
  (require 'autopair)
    (autopair-global-mode) 

  ;; electric
  ;; (setq electric-pair-pairs '(
  ;;                             (?\( . ?\))
  ;;                             (?\[ . ?\])
  ;;                             ))
  ;; (electric-pair-mode t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq scroll-conservatively 100)

  ;; highlighted line
  (when window-system (global-hl-line-mode t))

  ;; lambda  
  (when window-system (global-prettify-symbols-mode t)) 

  ;; subword, for camel case 
  (global-subword-mode 1)


#+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
  ;; (use-package exwm
  ;;   :ensure t
  ;;   :config
  ;;   (require 'exwm-config)
  ;;   (exwm-config-default))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; (require 'exwm-systemtray)
  ;; (exwm-systemtray-enable)
  ;; (global-set-key (kbd "s-k") 'exwm-workspace-delete)
  ;; (global-set-key (kbd "s-w") 'exwm-workspace-swap)
#+END_SRC
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
* Backup files
#+BEGIN_SRC emacs-lisp
;; disable backup and autosave files
(setq make-backup-file nil)
(setq auto-save-default nil)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
(elpy-enable)
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")

;; use flycheck not flymake with elpy
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; enable autopep8 formatting on save
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-classic-snippets
    :ensure t))
  ;;(yas-reload-all))
#+END_SRC
* Beacon
#+BEGIN_SRC emacs-lisp
;; shows cursor when switch buffers
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp
  ;; 
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  ;; C-c ' opens new buffer
  (setq org-src-window-setup 'current-window)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; syntax highight in code source blocks
  (setq org-src-fontify-natively t)

  ;; make org mode allow eval of some langs
  (require 'org)
  (require 'ob)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (clojure . t)
     (python . t)
     (ruby . t)))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matchig nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

  ;; space inserts '-' like in normal M-x
  (defadvice smex (around space-inserts-hyphen activate compile)
    (let ((ido-cannot-complete-command 
           `(lambda ()
              (interactive)
              (if (string= " " (this-command-keys))
                  (insert ?-)
                (funcall ,ido-cannot-complete-command)))))
      ad-do-it))
#+END_SRC
** ido switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC
* buffers
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)

#+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** expoert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  ;; go to char
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
    ;; (rainbow-delimiters-mode 1))

  ;; strikethrough for unmatched parenthisis
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error
                      :strike-through t)
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* window splitting fuction
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* convinient functions
** kill-whole-word
#+BEGIN_SRC emacs-lisp
  ;; C-h k - what function is called when keayboard shortcut is pressed 
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
      (buffer-substring
       (point-at-bol)
       (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
* hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  ;; opens explorer in lubuntu
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Hello Kuba!"))
#+END_SRC
* auto campletion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :init
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'hungry-delete-mode)
      (diminish 'beacon-mode)
      (diminish 'rainbow-mode)
      (diminish 'which-key-mode)
      (diminish 'autopair-mode)
      (diminish 'subword-mode))
#+END_SRC
* dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
* symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
